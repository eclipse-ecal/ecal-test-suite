#include <ecal_config_helper.h>
#include <ecal/ecal.h>
#include <tclap/CmdLine.h>
#include <iostream>
#include <atomic>
#include <thread>

std::atomic<int> counter(0);

void OnReceive(const eCAL::STopicId&, const eCAL::SDataTypeInformation&, const eCAL::SReceiveCallbackData& data_)
{
  if (data_.buffer_size > 0)
  {
    int value = static_cast<int>(static_cast<const unsigned char*>(data_.buffer)[0]);
    std::cout << "[Subscriber] Received value: " << value << std::endl;
    ++counter;
  }
}

int main(int argc, char* argv[])
{
  try
  {
    TCLAP::CmdLine cmd("{{ test_name }} Subscriber", ' ', "1.0");

    TCLAP::ValueArg<std::string> topic_arg("t", "topic", "Topic name", false, "test_topic", "string");
    TCLAP::ValueArg<std::string> name_arg("n", "name", "Node name", false, "{{ test_name }}_sub", "string");
    TCLAP::ValueArg<int> wait_arg("w", "wait", "Total wait duration (s)", false, 10, "int");

    cmd.add(topic_arg);
    cmd.add(name_arg);
    cmd.add(wait_arg);
    cmd.parse(argc, argv);

    setup_ecal_configuration("local_udp", false, name_arg.getValue());

    eCAL::CSubscriber sub(topic_arg.getValue());
    sub.SetReceiveCallback(OnReceive);

    std::cout << "[Subscriber] Listening on topic: " << topic_arg.getValue() << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(wait_arg.getValue()));

    eCAL::Finalize();

    std::cout << "[Subscriber] Total messages received: " << counter.load() << std::endl;

    return counter.load() > 0 ? 0 : 1;
  }
  catch (const TCLAP::ArgException& e)
  {
    std::cerr << "TCLAP error: " << e.error() << " (arg: " << e.argId() << ")\n";
    return 1;
  }
}
